import random

rule build_simulation:
	input:
		expand("{path}/structure_seq_sorted_PROBer.{suffix}", path = exp_path, suffix = ["beta", "gamma", "expr"]),
		expand("{path}/structure_seq_sorted_PROBer.stat/structure_seq_sorted_PROBer_{channel}.{suffix}", 
			path = exp_path, channel = ["minus", "plus"], suffix = ["read_model", "theta"])
	output:
		expand("{path}/ground_truth.{suffix}", path = sim_path, suffix = ["beta", "gamma", "expr"]),
		expand("{path}/ground_truth.stat/ground_truth_{channel}.{suffix}",
			path = sim_path, channel = ["minus", "plus"], suffix = ["read_model", "theta"]),
		touch("{path}/ground_truth".format(path = sim_path))
	run:
		shell("mkdir -p {sim_path}/ground_truth.stat")
		for i in range(len(input)):
			shell("cp {{input[{i}]}} {{output[{i}]}}".format(i = i))


seed_map = {"1" : 20160611, "2" : 0, "1e2" : 100, "1e3" : 1000, "1e4" : 10000, "1e5" : 100000}

def get_seeds(wildcards):
	key = wildcards.number if hasattr(wildcards, "number") else wildcards.TPM
	random.seed(seed_map[key])
	return [random.getrandbits(32), random.getrandbits(32)]


rule simulate:
	input: 
		arabidopsis_filt, 
		"{path}/structure_seq_sim.config".format(path = sim_path),
		"{path}/ground_truth".format(path = sim_path),
		PROBer
	params: seeds = get_seeds, output_name = "{path}/structure_seq_sim{{number}}".format(path = sim_path)
	output: expand("{path}/structure_seq_sim{{number,\d}}_{channel}.fq", path = sim_path, channel = ["minus", "plus"])
	shell:
		"{PROBer} simulate --seed {params.seeds[0]} {input[0]} {input[1]} {input[2]} minus 30000000 {params.output_name} && "
		"{PROBer} simulate --seed {params.seeds[1]} {input[0]} {input[1]} {input[2]} plus 30000000 {params.output_name}"


rule generate_input_list_for_boxplot:
	input:
		"{path}/ground_truth.expr".format(path = sim_path),
		arabidopsis_filt + ".mappability"
	output:
		"{path}/input_list_boxplot.txt".format(path = sim_path)
	shell:
		"{script_path}/generate_input_list {input} {output}"


rule generate_spike_in_ground_truth:
	input:
		"{path}/ground_truth.{{suffix}}".format(path = sim_path),
		expand("{path}/{name}.{{suffix}}", path = gt_path, name = spike_ins)
	output:
		"{path}/ground_truth_spikes.{{suffix,(beta|gamma)}}".format(path = sim_path)
	shell:
		"{script_path}/insertBetaGamma {input[0]} {output} {input[1]} {input[2]} {input[3]} {input[4]} {input[5]} {input[6]} {input[7]} {input[8]} {input[9]}"

rule build_spike_in_simulation:
	input: 
		expand("{path}/ground_truth_spikes.{suffix}", path = sim_path, suffix = ["gamma", "beta"]),
		expand("{path}/ground_truth.stat/ground_truth_{channel}.read_model", path = sim_path, channel = ["minus", "plus"]),
		"{path}/spikes_info.txt".format(path = gt_path),
		"{path}/ground_truth.expr".format(path = sim_path),
		expand("{path}/ground_truth.stat/ground_truth_{channel}.theta", path = sim_path, channel = ["minus", "plus"])
	output:
		expand("{path}/ground_truth_spikes_{{TPM}}.{suffix}", path = sim_path, suffix = ["gamma", "beta"]),		
		expand("{path}/ground_truth_spikes_{{TPM}}.stat/ground_truth_spikes_{{TPM}}_{channel}.read_model", path = sim_path, channel = ["minus", "plus"]),
		"{path}/ground_truth_spikes_{{TPM}}.expr".format(path = sim_path),
		expand("{path}/ground_truth_spikes_{{TPM}}.stat/ground_truth_spikes_{{TPM}}_{channel}.theta", path = sim_path, channel = ["minus", "plus"]),
		touch("{path}/ground_truth_spikes_{{TPM}}".format(path = sim_path))
	run:
		shell("mkdir -p {sim_path}/ground_truth_spikes_{wildcards.TPM}.stat")
		for i in range(4):
			shell("cp {{input[{0}]}} {{output[{0}]}}".format(i))
		shell("{script_path}/convertThetaforSpike {sim_path}/ground_truth_spikes_{wildcards.TPM} {wildcards.TPM} {input[4]} {input[5]} {input[6]} {input[7]}")

rule simulate_spike_in:
	input:
		arabidopsis_spike,
		"{path}/structure_seq_sim.config".format(path = sim_path),
		"{path}/ground_truth_spikes_{{TPM}}".format(path = sim_path),
		PROBer
	params: seeds = get_seeds, output_name = "{path}/structure_seq_spikes_{{TPM}}".format(path = sim_path)
	output:
		expand("{path}/structure_seq_spikes_{{TPM}}_{channel}.fq", path = sim_path, channel = ["minus", "plus"])
	shell:
		"{PROBer} simulate --seed {params.seeds[0]} {input[0]} {input[1]} {input[2]} minus 30000000 {params.output_name} && "
		"{PROBer} simulate --seed {params.seeds[1]} {input[0]} {input[1]} {input[2]} plus 30000000 {params.output_name}"


rule build_RSEM_simulation:
	input:
		"{path}/ground_truth.expr".format(path = sim_path),
		"{path}/ground_truth.stat/ground_truth_minus.read_model".format(path = sim_path)
	output:
		expand("{path}/ground_truth_RSEM.{suffix}", path = sim_path, suffix = ["isoforms.results", "model"])
	shell:
		"cp {input[0]} {output[0]} && "
		"{script_path}/convert_to_rsem_model {input[1]} {output[1]}"

rule simulate_RSEM:
	input:
		arabidopsis_filt_rsem,
		rules.build_RSEM_simulation.output,
		RSEM_simulate
	params: "{path}/structure_seq_simrsem".format(path = sim_path)
	output:
		"{path}/structure_seq_simrsem.fq".format(path = sim_path)
	shell: "{RSEM_simulate} {input[0]} {input[2]} {input[1]} 0.09 30000000 {params} --seed 20160613"
