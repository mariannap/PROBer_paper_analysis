rule download_bpseq:
	output:
		expand("{path}/d.{{name}}.bpseq", path = gt_path)
	shell:
		"wget -O {output} http://www.rna.icmb.utexas.edu/RNA/Structures/d.{wildcards.name}.bpseq"

rule extract_info_from_bpseq:
	input: 
		expand("{path}/{{organism,[a-z]+}}_{{rRNA}}.bpseq", path = gt_path)
	params: 
		output_name = "{path}/{{organism,[a-z]+}}_{{rRNA}}".format(path = gt_path)
	output: 
		expand("{path}/{{organism,[a-z]+}}_{{rRNA}}.{suffix}", path = gt_path, suffix = ["structure", "fa", "isac"])
	shell:
		"{script_path}/extractInfoFromBPSeq {input} {params.output_name} {wildcards.rRNA}_rRNA"

rule generate_arabidopsis_bpseq:
	input:
		expand("{path}/d.{number}.e.A.thaliana.bpseq", path = gt_path, number = ["16", "23"])
	output:
		expand("{path}/arabidopsis_{rRNA}.bpseq", path = gt_path, rRNA = ["18S", "25S"])
	shell:
		"cp {input[0]} {output[0]} && "
		"head -n 4 {input[1]} > {output[1]} && tail -n 3375 {input[1]} >> {output[1]}"

rule generate_arabidopsis_rRNAs_fa:
	input:
		expand("{path}/arabidopsis_{rRNA}.fa", path = gt_path, rRNA = ["18S", "25S"])
	output:
		expand("{path}/arabidopsis_rRNAs.fa", path = gt_path)
	shell:
		"cat {input} > {output}"

rule generate_yeast_bpseq:
	input:
		expand("{path}/d.{number}.e.S.cerevisiae.bpseq", path = gt_path, number = ["16", "23"])
	output:
		expand("{path}/yeast_{rRNA}.bpseq", path = gt_path, rRNA = ["18S", "25S"])
	shell:
		"cp {input[0]} {output[0]} && "
        "head -n 4 {input[1]} > {output[1]} && tail -n 3396 {input[1]} >> {output[1]}"

rule generate_mouse_bpseq:
	input:
		expand("{path}/d.16.{type}.M.musculus.bpseq", path = gt_path, type = ["e", "m"])
	output:
		expand("{path}/mouse_{rRNA}.bpseq", path = gt_path, rRNA = ["18S", "12S_Mt"])
	shell:
		"cp {input[0]} {output[0]} && grep -v 146 {input[1]} > {output[1]}"

rule generate_mouse_rRNAs_fa:
	input:
		expand("{path}/mouse_{rRNA}.fa", path = gt_path, rRNA = ["18S", "12S_Mt"])
	output:
		expand("{path}/mouse_rRNAs.fa", path = gt_path)
	shell:
		"cat {input} > {output}"

# rule unzip_SHAPE_data:
# 	input: 
# 		expand("{path}/SHAPE_data.zip", path = gt_path)
# 	output: 
# 		expand("{path}/{name}.adducts", path = gt_path, name = spike_ins),
# 		expand("{path}/{file}", path = gt_path, file = ["SHAPE.t2g", "spikes_info.txt"])
# 	shell:
# 		"unzip {input} -d {gt_path} && touch {output}"

# rule process_SHAPE_data:
# 	input:
# 		expand("{path}/{{shape_name}}.adducts", path = gt_path)
# 	params:
# 		output_name = "{path}/{{shape_name}}".format(path = gt_path)
# 	output:
# 		expand("{path}/{{shape_name}}.{suffix}", path = gt_path, suffix = ["fa", "gamma", "beta"])
# 	shell:
# 		"{script_path}/processSHAPEdata {input} {params.output_name}"

rule unzip_SHAPE_MaP:
	input:
		expand("{path}/SHAPE-MaP.zip", path = gt_path)
	output:
		expand("{path}/{name}.1m7.map", path = gt_path, name = spike_ins)
	shell:
		"unzip -u {input} -d {gt_path} && touch {output}"

rule process_SHAPE_MaP:
	input:
		expand("{path}/{{seqname}}.1m7.map", path = gt_path),
		expand("{path}/structure_seq_sorted_PROBer.{suffix}", path = exp_path, suffix = ["beta", "gamma"])
	params:
		output_name = "{path}/{{seqname}}".format(path = gt_path),
		seed = "0"
	output:
		expand("{path}/{{seqname}}.{suffix}", path = gt_path, suffix = ["fa", "gamma", "beta"])
	shell:
		"{script_path}/processSHAPEMaP {input} {params.seed} {params.output_name}"

rule generate_pseudoU_ground_truth:
	output:
		expand("{path}/{name}.truth", path = gt_path, name = ["18S", "25S", "5S", "58S", "LSR1"])
	shell:
		"{script_path}/gen_pseudoU_truth {output[0]} 1800 105 119 210 301 465 631 758 765 998 1180 1186 1289 1414 1190 && "
		"{script_path}/gen_pseudoU_truth {output[1]} 3396 775 959 965 985 989 1003 1041 1051 1055 1109 1123 2128 2132 2190 2257 2259 2263 2265 2313 2339 2348 2350 2415 2734 2825 2864 2879 2922 2943 2974 && "
		"{script_path}/gen_pseudoU_truth {output[2]} 121 49 && "
		"{script_path}/gen_pseudoU_truth {output[3]} 158 72 && "
		"{script_path}/gen_pseudoU_truth {output[4]} 1175 34 41 43"
