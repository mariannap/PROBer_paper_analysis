#!/usr/bin/env python

from sys import argv, exit
import math
import numpy

if len(argv) != 4:
	print("Usage: calcStructureFold minus.counts plus.counts output.txt")
	exit(-1)

def convert(arr):
	res = [math.log(float(x) + 1.0) for x in arr]
	l = float(len(res))
	denom = sum(res) / l
	res = [(x / denom if denom > 0.0 else 0.0) for x in res]
	return res

def calc_norm_factor(data):
	data.sort(reverse = True)
	s = len(data)
	fr = int(float(s) * 0.02)
	to = int(float(s) * 0.1)
	return numpy.mean(data[fr:to])


fm = open(argv[1])
fp = open(argv[2])

cnt = 0
RSRs = []
data = []

for line in fm:
	line2 = fp.readline()

	mc = convert(line[:-1].split())
	mp = convert(line2[:-1].split())

	vec = []
	if sum(mc) == 0.0 or sum(mp) == 0.0:
		vec = [0.0] * (len(mc) - 1)
	else:
		vec = [float("{0:.3f}".format(max(y - x, 0.0))) for x, y in zip(mc[1:], mp[1:])]
		data.extend(vec)
	RSRs.append(vec)

	cnt += 1     
	if cnt % 1000 == 0:
		print("{} FIN!".format(cnt))

fm.close()
fp.close()

print("Raw structural reactivities are calculated.")

norm_factor = calc_norm_factor(data)
print("2%-8% normalization factor is calculated.")
print("Factor = {:.3f}.".format(norm_factor))

fout = open(argv[3], "w")
cnt = 0
for rsr in RSRs:
	outvec = []
	if norm_factor > 0.0:
		outvec = [str(float("{0:.3f}".format(min(x / norm_factor, 7.0)))) for x in rsr]
	else:
		outvec = ["0.0"] * len(rsr)
	fout.write(" ".join(outvec) + "\n")
	cnt += 1
	if cnt % 10000 == 0:
		print("{} FIN!".format(cnt))
fout.close()
