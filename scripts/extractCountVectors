#!/usr/bin/env python

from sys import argv, exit
import pysam

def update(alignments):
    if len(alignments) == 0 or choice == 0 and len(alignments) > 1:
        return

    frac = 1.0 / len(alignments) if choice == 2 else 1.0
    for (tid, pos) in alignments:
        i = tid if requireAll else tid2num.get(tid, -1)
        if i >= 0:
            vectors[i][pos] += frac


if len(argv) < 5:
    print("Usage: extractCountVectors input.bam output.txt multi-read-option(0, unique only; 1, full weight; 2, distribute evenly) [all | name1 name2 ...]")
    exit(-1)

sam_in = pysam.AlignmentFile(argv[1], "rb")
choice = int(argv[3])

vectors = []
tid2num = dict()

requireAll = False

if argv[4] == "all":
    requireAll = True
    M = sam_in.nreferences
    for i in range(M):
        vector = [0] * sam_in.lengths[i]
        vectors.append(vector)
else:
    for i in range(4, len(argv)):
        if argv[i] in sam_in.references:
            tid = sam_in.references.index(argv[i])
            vector = [0] * sam_in.lengths[tid]
            vectors.append(vector)
            tid2num[tid] = i - 4
        else:
            print("Warning: {} is not a valid transcript id!".format(argv[i]))


cnt = 0
cname = ""
alignments = []

for aread in sam_in:
    if not aread.is_unmapped and (not aread.is_paired or aread.is_paired and aread.is_read1):
        assert not aread.is_reverse

        if cname != aread.query_name:
            update(alignments)
            cname = aread.query_name
            alignments = []

        alignments.append((aread.reference_id, aread.reference_start))

    cnt += 1
    if cnt % 1000000 == 0:
        print("{} FIN!".format(cnt))

update(alignments)

print("Begin to generate outputs.")
fout = open(argv[2], "w")
for i in range(len(vectors)):
    fout.write(" ".join(["{:.6f}".format(x) for x in vectors[i]]) + "\n")
fout.close()
print("Done.")
