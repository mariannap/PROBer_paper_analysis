#!/usr/bin/env python2

import os
from sys import argv, exit
import threading
import subprocess

import pymol
from pymol import cmd, stored
pymol.pymol_argv = ['pymol', '-qc']
pymol.finish_launching()


def calc_sasa(prog, pdb_path, base, chain, resiList, thread_id, results):
	results[thread_id] = subprocess.check_output([prog, pdb_path, base, chain, ','.join(resiList)]).replace(' ', '\t')

def calc_sasa_parallel(prog, base, chain, resiList, num_threads):
	threads = []
	results = [""] * num_threads
	q = len(resiList) / num_threads
	r = len(resiList) % num_threads

	lb = ub = 0
	for i in xrange(num_threads):
		ub = lb + q + (1 if i < r else 0)
		threads.append(threading.Thread(target = calc_sasa, args = (prog, pdb_path, base, chain, resiList[lb:ub], i, results)))
		threads[-1].start()
		lb = ub

	for thread in threads:
		thread.join()

	return "".join(results)


if len(argv) != 5:
	print("Usage: calc_sasa_rRNA_pymol_yeast ground_truth_path rRNA chain num_threads")
	exit(-1)

prog = os.path.dirname(os.path.abspath(__file__)) + "/calc_sasa_pymol_yeast"
gt_path = argv[1]
rRNA = argv[2]
chain = argv[3]
num_threads = int(argv[4])

# Load pdbs
cmd.load(gt_path + "/3u5b.pdb")
cmd.load(gt_path + "/3u5c.pdb")
cmd.load(gt_path + "/3u5d.pdb")
cmd.load(gt_path + "/3u5e.pdb")

# Create ribosome complex
cmd.create("mycomp", "3u5b 3u5c 3u5d 3u5e")


with open("{0}/yeast_{1}.sasa".format(gt_path, rRNA), "w") as fout:
	# Obtain resi for A
	stored.residues = []
	cmd.iterate("mycomp//{0}/A/N1".format(chain), "stored.residues.append(resi)")
	fout.write(calc_sasa_parallel(prog, gt_path, 'A', chain, stored.residues, num_threads))

	# Obtain resi for C
	stored.residues = []
	cmd.iterate("mycomp//{0}/C/N3".format(chain), "stored.residues.append(resi)")
	fout.write(calc_sasa_parallel(prog, gt_path, 'C', chain, stored.residues, num_threads))
