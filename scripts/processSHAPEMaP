#!/usr/bin/env python

from sys import argv, exit
import numpy.random

if len(argv) != 6:
    print("Usage: processSHAPEMaP input.map structure_seq_PROBer.beta structure_seq_PROBer.gamma seed output_name")
    exit(-1)

seqname = argv[5][argv[5].rfind('/') + 1 : ]

# Implementation of the normalization procedure in Sloma and Mathews paper
def normalize(orig_data):
    data = sorted(orig_data, reverse = True)
    s = len(data)

    # step 1, find candidate outliers
    Qu = numpy.percentile(data, 75)
    Ql = numpy.percentile(data, 25)
    threshold = Qu + 1.5 * (Qu - Ql)
    n_outlier = sum([1 if x > threshold else 0 for x in data])
    # step 2, remove outliers; no more than 10% if length > 100, no more than 5% otherwise
    n_outlier = min(n_outlier, int(float(s) * 0.1) if s > 100 else int(float(s) * 0.05))
    # step 3, normalize data
    R_max = numpy.mean(data[n_outlier: n_outlier + int(float(s - n_outlier) * 0.1)])

    print("R_max = {:.3f}".format(R_max))

    # return normalized data
    return [x / R_max for x in orig_data]


# Read MaP file
refseq = ""
values = []
with open(argv[1]) as fin:
    cnt = 0
    for line in fin:
        fields = line.strip().split()
        refseq += fields[3] if fields[3] != 'U' else 'T'

        cnt += 1
        if fields[1] == 'G':
            print(cnt)
            print(line)
        values.append(float(fields[1]))

# Generate fasta file
reflen = len(refseq)
with open(argv[5] + ".fa", "w") as fout:
    fout.write(">00_{0}\n{1}\n".format(seqname, refseq))

# Load 18S gamma
gammas = []
with open(argv[3]) as fin:
    fin.readline()
    fields = fin.readline().strip().split()
    gammas = [float(x) for x in fields[2:]]

# Generate gamma file
numpy.random.seed(int(argv[4]))
with open(argv[5] + ".gamma", "w") as fout:
    fout.write("00_{0}\t{1}\t{2}\n".format(seqname, reflen - 6, "\t".join(["{0:.10g}".format(x) for x in numpy.random.choice(gammas, size = reflen - 6)])))

# Load 18S gamma
betas = []
with open(argv[2]) as fin:
    fin.readline()
    fields = fin.readline().strip().split()
    betas = [float(x) for x in fields[2:]]

# Generate beta file
factor = max(betas) / max(values)
with open(argv[5] + ".beta", "w") as fout:
    values = [x * factor if x > 0.0 else 0.0 for x in values]
    fout.write("00_{0}\t{1}\t{2}\n".format(seqname, reflen - 6, "\t".join(["{0:.10g}".format(x) for x in values[:-6]])))
