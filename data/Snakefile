rule download_sra:
	output: "{path}/{run,SRR\d+}.sra"
	run:
		url = "ftp://ftp-trace.ncbi.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/{0}/{1}/{1}.sra".format(wildcards.run[:6], wildcards.run)
		shell("wget -O {output} {url}")

rule dump_to_FASTQ:
	input: "{path}/{run}.sra", fastq_dump
	output: "{path}/{run,SRR\d+}.fastq"
	shell: "{fastq_dump} --split-spot -O {wildcards.path} {input[0]}"

rule dump_to_FASTQ_PE:
	input: "{path}/{run}.sra", fastq_dump
	output: expand("{{path,data/(GrannemanLab|YeoLab/eCLIP)}}/{{run,SRR\d+}}_{mate}.fastq", mate = ["1", "2"])
	shell: "{fastq_dump} --split-spot --split-3 -O {wildcards.path} {input[0]}"

ruleorder: dump_to_FASTQ_PE > dump_to_FASTQ


rule remove_adapter_AssmannLab:
	input:
		"{path}/{{run}}.fastq".format(path = AssmannLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = AssmannLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = AssmannLab)
	shell:
		"{Cutadapt} -u 3 -a GATCGGAAGAGCACACGTCTGAACTCCAGTCAC -m 21 -o {output} {input[0]} > {log}"


rule remove_3_prime_adapter_McmanusLab:
	input:
		"{path}/{{run}}.fastq".format(path = McmanusLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = McmanusLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = McmanusLab)
	shell:
		"{Cutadapt} -a CTGTAGGCACCATCAAT -m 25 -o {output} {input[0]} > {log}"

rule remove_5_prime_adapter_McmanusLab:
	input:
		"{path}/{{run}}_trimmed.fq".format(path = McmanusLab),
		Cutadapt
	output:
		expand("{path}/{{run}}_{category}.fq", path = McmanusLab, category = ["passed", "nodrop"])
	log:
		"{path}/{{run}}_passed.log".format(path = McmanusLab)
	shell:
		"{Cutadapt} -g ^ATCGTAGGCACCTGAAA --untrimmed-output {output[0]} -o {output[1]} {input[0]} > {log}"

rule align_reads_for_trimming_mismatches_McmanusLab:
	input:
		"{path}/{{run}}_passed.fq".format(path = McmanusLab),
		yeast_filt + ".done", Bowtie, Samtools
	output:
		"{path}/{{run}}_for_trimming_mismatches.bam".format(path = McmanusLab)
	log:
		"{path}/{{run}}_for_trimming_mismatches.log".format(path = McmanusLab)
	threads: 10
	shell:
		"{Bowtie} --norc --best --chunkmbs 500 -p {threads} -S {yeast_filt} {input[0]} 2> {log} | {Samtools} view -S -b -o {output} -"

rule trim_mismatches_McmanusLab:
	input:
		"{path}/{{run}}_for_trimming_mismatches.bam".format(path = McmanusLab)
	output:
		"{path}/{{run}}_corrected.fq".format(path = McmanusLab)
	shell:
		"{script_path}/trimMismatch {input} {output}"


rule remove_adapter_ChangLab:
	input:
		"{path}/{{run}}.fastq".format(path = ChangLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = ChangLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = ChangLab)
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG -m 33 -o {output} {input[0]} > {log}"

rule remove_PCR_duplicate_ChangLab:
	input:
		"{path}/{{run}}_trimmed.fq".format(path = ChangLab)
	output:
		"{path}/{{run}}_cleaned.fq".format(path = ChangLab)
	log:
		"{path}/{{run}}_cleaned.log".format(path = ChangLab)
	shell:
		"{script_path}/remove_PCR_dup_SE {input} 13 {output} > {log}"


rule remove_adapter_GilbertLab:
	input:
		"{path}/{{run}}.fastq".format(path = GilbertLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = GilbertLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = GilbertLab)
	shell:
		"{Cutadapt} -a TGGAATTCTCGGGTGCCAAGG -m 18 -o {output} {input[0]} > {log}"


rule download_info_GrannemanLab:
	output:
		expand("{path}/{run}.info", path = GrannemanLab, run = ["SRR1041324", "SRR1041325", "SRR1041326", "SRR1041327", "SRR1041328", "SRR1041329"])
	shell:
		"wget -O {GrannemanLab}/GrannemanLab_info.zip https://www.dropbox.com/s/3vfio4em3irzern/GrannemanLab_info.zip?dl=0 ; "
		"unzip -d {GrannemanLab} {GrannemanLab}/GrannemanLab_info.zip"

rule integrate_umi_and_trim_first_nucleotide_GrannemanLab:
	input:
		expand("{path}/{{run}}.info", path = GrannemanLab),
		expand("{path}/{{run}}_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"])
	output:
		expand("{path}/{{run}}_umi_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"])
	shell:
		"{script_path}/integrate_umi_info_GrannemanLab {input[0]} {GrannemanLab}/{wildcards.run} {GrannemanLab}/{wildcards.run}_umi"

inline_barcodes_GrannemanLab = ["CGTGAT", "ACATCG", "GCCTAA"]
data2barcodes_GrannemanLab = {
	"SRR1041324" : inline_barcodes_GrannemanLab[0], 
	"SRR1041325" : inline_barcodes_GrannemanLab[0],
	"SRR1041326" : inline_barcodes_GrannemanLab[1],
	"SRR1041327" : inline_barcodes_GrannemanLab[2],
	"SRR1041328" : inline_barcodes_GrannemanLab[0], 
	"SRR1041329" : inline_barcodes_GrannemanLab[2]
}

def get_adapter_seq_for_mate2_GrannemanLab(wildcards):
	return 'N' + data2barcodes_GrannemanLab[wildcards.run] + 'N' * 6 + "AGATCGGAAGAGCGTCGTGTAGGG"

rule trim_adapter_GrannemanLab:
	input:
		expand("{path}/{{run}}_umi_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"]),
		Cutadapt
	params: get_adapter_seq_for_mate2_GrannemanLab
	output: 
		expand("{path}/{{run}}_trimmed_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	log: "{path}/{{run}}_trimmed.log".format(path = GrannemanLab)
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCACACG -A {params} -m 18 -o {output[0]} -p {output[1]} {input[0]} {input[1]} > {log}"

rule remove_PCR_duplicate_GrannemanLab:
	input: 
		expand("{path}/{{run}}_trimmed_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	output: 
		expand("{path}/{{run}}_cleaned_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	log: 
		"{path}/{{run}}_cleaned.log".format(path = GrannemanLab)
	shell:
		"{script_path}/remove_PCR_dup_PE 25 {input} {output} > {log}"


#iCLIP data

rule download_UleLab_hnRNPC_iCLIP_data:
	output:
		"{path}/hnRNPC_HeLa_UleLab_rep1.fastq".format(path = UleLab)
	shell:
		"wget -O {UleLab}/ERR196175.fastq.gz ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR196/ERR196175/ERR196175.fastq.gz && "
		"wget -O {UleLab}/ERR196174.fastq.gz ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR196/ERR196174/ERR196174.fastq.gz && "
		"wget -O {UleLab}/ERR196187.fastq.gz ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR196/ERR196187/ERR196187.fastq.gz && "
		"wget -O {UleLab}/ERR196179.fastq.gz ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR196/ERR196179/ERR196179.fastq.gz && "
		"gunzip -c {UleLab}/ERR196175.fastq.gz {UleLab}/ERR196174.fastq.gz {UleLab}/ERR196187.fastq.gz {UleLab}/ERR196179.fastq.gz > {output}"

# adapter is the reverse complement of P3Solexa
rule remove_adapter_iCLIP:
	input:
		"{path}/{run}.fastq",
		Cutadapt
	output:
		"{path,(data/UleLab|data/YeoLab/iCLIP)}/{run}_trimmed.fq"
	log:
		"{path}/{run}_trimmed.log"
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG -m 27 -o {output} {input[0]} > {log}"

rule remove_PCR_duplicate_iCLIP:
	input:
		"{path}/{run}_trimmed.fq"
	output:
		"{path,(data/UleLab|data/YeoLab/iCLIP)}/{run}_cleaned.fq"
	log:
		"{path}/{run}_cleaned.log"
	shell:
		"{script_path}/remove_PCR_dup_SE {input} 9 {output} > {log}"

rule remove_reads_mapped_to_rep_iCLIP:
	input:
		rep_ref,
		"{path}/{run}_cleaned.fq",
		Bowtie
	output:
		"{path,(data/UleLab|data/YeoLab/iCLIP)}/{run}_reprm.fq"
	log: 
		"{path}/{run}_reprm.log"
	threads: 10
	shell:
		"{Bowtie} -p {threads} --un {output} {input[0]} {input[1]} > /dev/null 2> {log}"


# eCLIP data
from itertools import chain

# complement of nucleotides
complement = {'A' : 'T', 'C' : 'G', 'G' : 'C', 'T' : 'A', 'N' : 'N'}

# RNA adapter sequences
adapterDict = {"A01" : "ATTGCTT", "B06" : "ACAAGCC", "C01" : "AACTTGT", "D08" : "AGGACCA",
			   "X1A" : "ATATAGGNNNNN", "X1B" : "AATAGCANNNNN", "X2A" : "AAGTATANNNNN", "X2B" : "AGAAGATNNNNN",
			   "A03" : "ANNNNGGTCAT", "G07" : "ANNNNACAGGA", "A04" : "ANNNNAAGCTG", "F05" : "ANNNNGTATCC"}

# reverse complements of SP1
RiL19 = "AGATCGGAAGAGCGTCGTG"
rcSP1 = "AGATCGGAAGAGCGTCGTGTAG"

# reverse complement of SP2
rcSP2 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC"


# return the reverse complement of adapter 
def rc(adapter):
	res = ""
	for c in adapter:
		res = complement[c] + res
	return res

# generate all k mers
def generate_k_mer(adapter, k = 15):
	res = []
	for i in range(len(adapter) - k + 1):
		res.append(adapter[i : i + k])
	return res

# generate k mers prefixed by adapter
def generate_prefixed_k_mer(name, k = 15):
	res = []
	adapter = adapterDict[name]
	l = len(adapter)
	for i in range(l):
		res.append(adapter[i:] + rcSP1[:i + k - l])
	return res

# generate cutadapt options
def generate_cutadapt_options(data):
	res = "-O {0} -a {1}{2}".format(3 + data[0], 'N' * data[0], rcSP2)

	if data[1] is None:
		# input
		res += " -g " + rc(RiL19)
		res += "".join([" -A {0}".format(kmer) for kmer in generate_k_mer(RiL19)])
	else:
		# biological replicates
		res += "".join([" -g CTTCCGATCT{0}".format(rc(adapterDict[name])) for name in data[1:]])
		res += "".join([" -A {0}".format(kmer) for kmer in chain(generate_prefixed_k_mer(data[1]), generate_prefixed_k_mer(data[2]), generate_k_mer(rcSP1))])

	return res


rule sra_to_ENCODE_eCLIP:
	input: 
		expand("{path}/{{run}}_{{mate}}.fastq", path = YeoLab_eCLIP)
	output: 
		expand("{path}/{{run,SRR\d+}}_s2E_{{mate,(1|2)}}.fastq", path = YeoLab_eCLIP)
	shell:
		"{script_path}/sra2encode_eclip {input} {output}"

RBFOX2_description = {"SRR3147598" : (5, "A04", "F05"), "SRR3147599" : (5, "A04", "F05"), "SRR3147600" : (5, None, None)}

def get_RBFOX2_cutadapt_options(wildcards):
	return generate_cutadapt_options(RBFOX2_description[wildcards.run])

rule cutadapt_RBFOX2_eCLIP:
	input:
		expand("{path}/{{run}}_s2E_{mate}.fastq", path = YeoLab_eCLIP, mate = ["1", "2"]),
		Cutadapt
	params: get_RBFOX2_cutadapt_options
	output: 
		expand("{path}/{{run,SRR3147(598|599|600)}}_trimmed_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"])
	log: expand("{path}/{{run}}_trimmed.log", path = YeoLab_eCLIP)
	shell:
		"{Cutadapt} -f fastq --match-read-wildcards --times 2 -e 0.1 --quality-cutoff 6 -m 18 {params}"
		" --length-tag 'length=' -o {output[0]} -p {output[1]} {input[0]} {input[1]} > {log}"

# file_name to accession 
fn2acc_eCLIP = {"TARDBP_K562_YeoLab_rep1_1" : "ENCFF734UEC",
		  		"TARDBP_K562_YeoLab_rep1_2" : "ENCFF147JYD",
		  		"TARDBP_K562_YeoLab_input_1" : "ENCFF558NTZ",
		  		"TARDBP_K562_YeoLab_input_2" : "ENCFF333DTJ",
		  		"PUM2_K562_YeoLab_rep1_1" : "ENCFF956TOZ",
		  		"PUM2_K562_YeoLab_rep1_2" : "ENCFF133DNM",
		  		"PUM2_K562_YeoLab_input_1" : "ENCFF616FCF",
		  		"PUM2_K562_YeoLab_input_2" : "ENCFF495ZPY",
		  		"TRA2A_K562_YeoLab_rep1_1" : "ENCFF917GQR",
		  		"TRA2A_K562_YeoLab_rep1_2" : "ENCFF116QDH",
		  		"TRA2A_K562_YeoLab_input_1" : "ENCFF057LEI",
		  		"TRA2A_K562_YeoLab_input_2" : "ENCFF169EQC"}

# data description
data_description_eCLIP = {("TARDBP", "rep1") : (5, "A01", "B06"), ("TARDBP", "input") : (5, None, None),
						  ("TRA2A", "rep1") : (5, "A01", "B06"), ("TRA2A", "input") : (5, None, None),
						  ("PUM2", "rep1") : (10, "A03", "G07"), ("PUM2", "input") : (10, None, None)}

rule download_ENCODE_eCLIP:
	output: expand("{path}/{{filename,[A-Za-z0-9]+_K562_YeoLab_[^_]+_\d}}.fastq", path = YeoLab_eCLIP)
	run:
		acc = fn2acc_eCLIP.get(wildcards.filename, None)
		assert acc != None
		url = "https://www.encodeproject.org/files/{acc}/@@download/{acc}.fastq.gz".format(acc = acc)
		shell("wget -O {YeoLab_eCLIP}/{acc}.fastq.gz {url}")
		shell("gunzip -c {YeoLab_eCLIP}/{acc}.fastq.gz > {output}")

def get_ENCODE_cutadapt_options(wildcards):
	return generate_cutadapt_options(data_description_eCLIP[(wildcards.protein, wildcards.rep)])

rule cutadapt_ENCODE_eCLIP:
	input:
		expand("{path}/{{protein}}_K562_YeoLab_{{rep}}_{mate}.fastq", path = YeoLab_eCLIP, mate = ["1", "2"]),
		Cutadapt
	params: get_ENCODE_cutadapt_options
	output:
		expand("{path}/{{protein,[A-Za-z0-9]+}}_K562_YeoLab_{{rep,(input|rep1)}}_trimmed_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"])
	log: expand("{path}/{{protein}}_K562_YeoLab_{{rep}}_trimmed.log", path = YeoLab_eCLIP)
	shell:
		"{Cutadapt} -f fastq --match-read-wildcards --times 2 -e 0.1 --quality-cutoff 6 -m 18 {params}"
		" -o {output[0]} -p {output[1]} {input[0]} {input[1]} > {log}"

rule remove_PCR_duplicate_eCLIP:
	input:
		expand("{path}/{{run}}_trimmed_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"])
	output:
		expand("{path}/{{run}}_cleaned_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"])
	log: expand("{path}/{{run}}_cleaned.log", path = YeoLab_eCLIP)
	shell:
		"{script_path}/remove_PCR_dup_PE 25 {input} {output} > {log}"

rule remove_reads_mapped_to_rep_eCLIP:
	input:
		rep_ref,
		expand("{path}/{{run}}_cleaned_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"]),
		Bowtie2
	output:
		expand("{path}/{{run}}_reprm_{mate}.fq", path = YeoLab_eCLIP, mate = ["1", "2"])
	log: expand("{path}/{{run}}_reprm.log", path = YeoLab_eCLIP)
	threads: 10
	shell:
		"mkdir -p {YeoLab_eCLIP}/{wildcards.run}_reprm.tmp && "
		"{Bowtie2} -p {threads} -k 1 -I 1 -X 1000 --no-mixed --no-discordant --un-conc {YeoLab_eCLIP}/{wildcards.run}_reprm.tmp -x {input[0]} -1 {input[1]} -2 {input[2]} -S /dev/null 2> {log} && "
		"mv {YeoLab_eCLIP}/{wildcards.run}_reprm.tmp/un-conc-mate.1 {output[0]} && "
		"mv {YeoLab_eCLIP}/{wildcards.run}_reprm.tmp/un-conc-mate.2 {output[1]} && "
		"rm -rf {YeoLab_eCLIP}/{wildcards.run}_reprm.tmp"
