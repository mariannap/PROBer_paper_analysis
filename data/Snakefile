rule download_sra:
	output: "{path}/{run,SRR\d+}.sra"
	run:
		url = "ftp://ftp-trace.ncbi.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/{0}/{1}/{1}.sra".format(wildcards.run[:6], wildcards.run)
		shell("wget -O {output} {url}")

rule dump_to_FASTQ:
	input: "{path}/{run}.sra", fastq_dump
	output: "{path}/{run,SRR\d+}.fastq"
	shell: "{fastq_dump} --split-spot -O {wildcards.path} {input[0]}"

rule dump_to_FASTQ_PE:
	input: "{path}/{run}.sra", fastq_dump
	output: expand("{{path,data/(GrannemanLab)}}/{{run,SRR\d+}}_{mate}.fastq", mate = ["1", "2"])
	shell: "{fastq_dump} --split-spot --split-3 -O {wildcards.path} {input[0]}"

ruleorder: dump_to_FASTQ_PE > dump_to_FASTQ


rule remove_adaptor_AssmannLab:
	input:
		"{path}/{{run}}.fastq".format(path = AssmannLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = AssmannLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = AssmannLab)
	shell:
		"{Cutadapt} -u 3 -a GATCGGAAGAGCACACGTCTGAACTCCAGTCAC -m 21 -o {output} {input[0]} > {log}"


rule remove_3_prime_adaptor_McmanusLab:
	input:
		"{path}/{{run}}.fastq".format(path = McmanusLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = McmanusLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = McmanusLab)
	shell:
		"{Cutadapt} -a CTGTAGGCACCATCAAT -m 25 -o {output} {input[0]} > {log}"

rule remove_5_prime_adaptor_McmanusLab:
	input:
		"{path}/{{run}}_trimmed.fq".format(path = McmanusLab),
		Cutadapt
	output:
		expand("{path}/{{run}}_{category}.fq", path = McmanusLab, category = ["passed", "nodrop"])
	log:
		"{path}/{{run}}_passed.log".format(path = McmanusLab)
	shell:
		"{Cutadapt} -g ^ATCGTAGGCACCTGAAA --untrimmed-output {output[0]} -o {output[1]} {input[0]} > {log}"

rule align_reads_for_trimming_mismatches_McmanusLab:
	input:
		"{path}/{{run}}_passed.fq".format(path = McmanusLab),
		yeast_filt + ".done", Bowtie, Samtools
	output:
		"{path}/{{run}}_for_trimming_mismatches.bam".format(path = McmanusLab)
	log:
		"{path}/{{run}}_for_trimming_mismatches.log".format(path = McmanusLab)
	threads: 10
	shell:
		"{Bowtie} --norc --best --chunkmbs 500 -p {threads} -S {yeast_filt} {input[0]} 2> {log} | {Samtools} view -S -b -o {output} -"

rule trim_mismatches_McmanusLab:
	input:
		"{path}/{{run}}_for_trimming_mismatches.bam".format(path = McmanusLab)
	output:
		"{path}/{{run}}_corrected.fq".format(path = McmanusLab)
	shell:
		"{script_path}/trimMismatch {input} {output}"


rule remove_adaptor_ChangLab:
	input:
		"{path}/{{run}}.fastq".format(path = ChangLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = ChangLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = ChangLab)
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG -m 33 -o {output} {input[0]} > {log}"

rule remove_PCR_duplicate_ChangLab:
	input:
		"{path}/{{run}}_trimmed.fq".format(path = ChangLab)
	output:
		"{path}/{{run}}_cleaned.fq".format(path = ChangLab)
	shell:
		"{script_path}/remove_dup {input} 13 {output}"


rule remove_adaptor_GilbertLab:
	input:
		"{path}/{{run}}.fastq".format(path = GilbertLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = GilbertLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = GilbertLab)
	shell:
		"{Cutadapt} -a TGGAATTCTCGGGTGCCAAGG -m 18 -o {output} {input[0]} > {log}"


rule remove_adaptor_YeoLab:
	input:
		"{path}/{{run}}.fastq".format(path = YeoLab),
		Cutadapt
	output:
		"{path}/{{run}}_trimmed.fq".format(path = YeoLab)
	log:
		"{path}/{{run}}_trimmed.log".format(path = YeoLab)
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG -m 27 -o {output} {input[0]} > {log}"

rule remove_PCR_duplicate_YeoLab:
	input:
		"{path}/{{run}}_trimmed.fq".format(path = YeoLab)
	output:
		"{path}/{{run}}_cleaned.fq".format(path = YeoLab)
	shell:
		"{script_path}/remove_dup {input} 9 {output}"


rule download_info_GrannemanLab:
	output:
		expand("{path}/{run}.info", path = GrannemanLab, run = ["SRR1041324", "SRR1041325", "SRR1041326", "SRR1041327", "SRR1041328", "SRR1041329"])
	shell:
		"wget -O {GrannemanLab}/GrannemanLab_info.zip https://www.dropbox.com/s/3vfio4em3irzern/GrannemanLab_info.zip?dl=0 ; "
		"unzip -d {GrannemanLab} {GrannemanLab}/GrannemanLab_info.zip"

rule integrate_umi_and_trim_first_nucleotide_GrannemanLab:
	input:
		expand("{path}/{{run}}.info", path = GrannemanLab),
		expand("{path}/{{run}}_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"])
	output:
		expand("{path}/{{run}}_umi_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"])
	shell:
		"{script_path}/integrate_umi_info_GrannemanLab {input[0]} {GrannemanLab}/{wildcards.run} {GrannemanLab}/{wildcards.run}_umi"

inline_barcodes_GrannemanLab = ["CGTGAT", "ACATCG", "GCCTAA"]
data2barcodes_GrannemanLab = {
	"SRR1041324" : inline_barcodes_GrannemanLab[0], 
	"SRR1041325" : inline_barcodes_GrannemanLab[0],
	"SRR1041326" : inline_barcodes_GrannemanLab[1],
	"SRR1041327" : inline_barcodes_GrannemanLab[2],
	"SRR1041328" : inline_barcodes_GrannemanLab[0], 
	"SRR1041329" : inline_barcodes_GrannemanLab[2]
}

def get_adapter_seq_for_mate2_GrannemanLab(wildcards):
	return 'N' + data2barcodes_GrannemanLab[wildcards.run] + 'N' * 6 + "AGATCGGAAGAGCGTCGTGTAGGG"

rule trim_adapter_GrannemanLab:
	input:
		expand("{path}/{{run}}_umi_{mate}.fastq", path = GrannemanLab, mate = ["1", "2"]),
		Cutadapt
	params: get_adapter_seq_for_mate2_GrannemanLab
	output: 
		expand("{path}/{{run}}_trimmed_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	log: "{path}/{{run}}_trimmed.log".format(path = GrannemanLab)
	shell:
		"{Cutadapt} -a AGATCGGAAGAGCACACG -A {params} -m 18 -o {output[0]} -p {output[1]} {input[0]} {input[1]} > {log}"

rule remove_PCR_duplicate_GrannemanLab:
	input: 
		expand("{path}/{{run}}_trimmed_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	output: 
		expand("{path}/{{run}}_cleaned_{mate}.fq", path = GrannemanLab, mate = ["1", "2"])
	log: 
		"{path}/{{run}}_cleaned.log".format(path = GrannemanLab)
	shell:
		"{script_path}/remove_PCR_dup_PE 25 {input} {output} > {log}"
