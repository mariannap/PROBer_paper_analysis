from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

rule build_fastq_dump:
	input:
		HTTP.remote("ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.6.3/sratoolkit.2.6.3-ubuntu64.tar.gz", insecure = True)
	output:
		touch(fastq_dump)
	shell:
		"tar -C {tool_path} -xzf {input}"

rule build_cutadapt:
	input: "{name}.tar.gz"
	output: touch("{name}/bin/cutadapt")
	shell:
		"tar -C {tool_path} -xzf {input} && "
		"cd {wildcards.name} && python setup.py build_ext -i"

rule build_samtools:
	input: "{name}.tar.bz2"
	output: touch("{name}/samtools")
	shell:
		"tar -C {tool_path} -xjf {input} && "
		"cd {wildcards.name} && make"

rule build_bowtie:
	input: "{name}-src.zip"
	output: touch("{name}/bowtie")
	shell:
		"unzip -d {tool_path} {input} && "
		"cd {wildcards.name} && make"

rule build_bowtie2:
	input: "{name}-source.zip"
	output: touch("{name}/bowtie2")
	shell:
		"unzip -d {tool_path} {input} && "
		"cd {wildcards.name} && make"

rule build_rsem:
	input: "{name}.tar.gz"
	output: touch(expand("{{name}}/{cmd}", cmd = ["rsem-prepare-reference", "rsem-simulate-reads", "rsem-calculate-expression"]))
	shell:
		"tar -C {tool_path} -xzf {input} && "
		"cd {wildcards.name} && make"

rule build_PROBer:
	input: "{name}.tar.gz"
	output: touch(expand("{{name}}/build/src/{cmd}", cmd = ["PROBer", "PROBer-single-batch-estimate"]))
	shell:
		"tar -C {tool_path} -xzf {input} && "
		"mkdir -p {wildcards.name}/build && cd {wildcards.name}/build && cmake .. && make"