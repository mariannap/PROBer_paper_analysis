# from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
# FTP = FTPRemoteProvider()
## Snakemake's FTP service has a slow checking period before the workflow actually run, thus switch to use wget directly

rule build_PROBer_and_Bowtie_indices:
    input:
        expand("{{ref_name}}.{suffix}", suffix = ["fa", "t2g"]),
        PROBer, Bowtie
    output:
        touch("{ref_name,^references/[a-z]+/[a-z]+_[a-z]+}")
    shell:
        "{PROBer} prepare --transcript-to-gene-map {input[1]} --bowtie --bowtie-path {bowtie_path} {input[0]} {wildcards.ref_name}"

rule build_RSEM_indices:
    input:
        expand("{{ref_name}}.{suffix}", suffix = ["fa", "t2g"]),
        RSEM_prepare
    params:
        ref_rsem = "{ref_name,^references/[a-z]+/[a-z]+_[a-z]+}_rsem"
    output:
        touch("{ref_name}_rsem")
    shell:
        "sed -r 's/([^\\t]+)\\t([^\\t]+)/\\2\\t\\1/' {input[1]} > {params.ref_rsem}.g2t && "
        "{RSEM_prepare} --transcript-to-gene-map {params.ref_rsem}.g2t {input[0]} {params.ref_rsem}"

rule download_arabidopsis_genome:
    # input:
    #     FTP.remote("ftp.arabidopsis.org/home/tair/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas")
    output:
        "{path}/TAIR10_chr_all.fa".format(path = ref_arabidopsis)
    shell:
        # "{script_path}/replace_chromosome_name_for_TAIR10 {input} {output}"
        "wget -O {ref_arabidopsis}/TAIR10_chr_all.fas ftp://ftp.arabidopsis.org/home/tair/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas && "
        "{script_path}/replace_chromosome_name_for_TAIR10 {ref_arabidopsis}/TAIR10_chr_all.fas {output}" 

rule generate_arabidopsis_GTF:
    # input:
    #     FTP.remote("ftp.arabidopsis.org/home/tair/Genes/TAIR10_genome_release/TAIR10_gff3/TAIR10_GFF3_genes.gff")
    output:
        "{path}/TAIR10_GTF_genes.gtf".format(path = ref_arabidopsis)
    shell:
        # "{script_path}/gff3_to_gtf {input} {output} mRNA,rRNA,ncRNA,snRNA,tRNA,miRNA,snoRNA"
        "wget -O {ref_arabidopsis}/TAIR10_GFF3_genes.gff ftp://ftp.arabidopsis.org/home/tair/Genes/TAIR10_genome_release/TAIR10_gff3/TAIR10_GFF3_genes.gff && "
        "{script_path}/gff3_to_gtf {ref_arabidopsis}/TAIR10_GFF3_genes.gff {output} mRNA,rRNA,ncRNA,snRNA,tRNA,miRNA,snoRNA"

rule generate_arabidopsis_remove_list:
    output:
        "{path}/remove_list.txt".format(path = ref_arabidopsis)
    run:
        with open(output[0], "w") as fout:
            fout.write("AT2G01010.1\nAT3G41768.1\nAT2G01021.1\n")

rule extract_arabidopsis_transcripts:
    input:
        rules.download_arabidopsis_genome.output,
        rules.generate_arabidopsis_GTF.output,
        rules.generate_arabidopsis_remove_list.output,
        "{path}/arabidopsis_rRNAs.fa".format(path = gt_path)
    output:
        expand("{ref_name}.{suffix}", ref_name = arabidopsis_filt, suffix = ["fa", "t2g", "dup", "unextracted"])
    shell:
        "{script_path}/genome_to_transcript_set {input} {arabidopsis_filt}"

rule calculate_mappability_for_arabidopsis_filt:
    input:
        arabidopsis_filt,
        "{path}/calcMappability".format(path = script_path)
    output:
        arabidopsis_filt + ".mappability"
    shell:
        "{input[1]} 21 {arabidopsis_filt}.transcripts.fa {output}"

# rule add_spike_in_sequences_to_arabidopsis_transcripts:
#     input:
#         expand("{path}/{spike_in}.fa", path = gt_path, spike_in = ["RNaseP_WT", "pT181_long", "pT181_short"]),
#         arabidopsis_filt + ".fa",
#         gt_path + "/SHAPE.t2g",
#         arabidopsis_filt + ".t2g"
#     output:
#         expand("{ref_name}.{suffix}", ref_name = arabidopsis_spike, suffix = ["fa", "t2g"])
#     shell:
#         "cat {input[0]} {input[1]} {input[2]} {input[3]} > {output[0]} && "
#         "cat {input[4]} {input[5]} > {output[1]}"

rule add_spike_in_sequences_to_arabidopsis_transcripts:
    input:
        expand("{path}/{spike_in}.fa", path = gt_path, spike_in = spike_ins),
        arabidopsis_filt + ".fa",
        gt_path + "/SHAPE_MaP.t2g",
        arabidopsis_filt + ".t2g"
    output:
        expand("{ref_name}.{suffix}", ref_name = arabidopsis_spike, suffix = ["fa", "t2g"])
    shell:
        "cat {input[0]} {input[1]} {input[2]} {input[3]} {input[4]} {input[5]} {input[6]} {input[7]} {input[8]} {input[9]} > {output[0]} && "
        "cat {input[10]} {input[11]} > {output[1]}"

rule generate_yeast_remove_list:
    output:
        "{path}/remove_list.txt".format(path = ref_yeast)
    run:
        with open(output[0], "w") as fout:
            fout.write("RDN37-1\nRDN37-2\nRDN18-2\nRDN25-2\nRDN58-2\nRDN5-2\nRDN5-3\nRDN5-4\nRDN5-5\nRDN5-6\nYLR154C-G\n")

rule extract_yeast_transcripts:
    input:
        # FTP.remote("ftp.ensembl.org/pub/release-84/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz"),
        # FTP.remote("ftp.ensembl.org/pub/release-84/gtf/saccharomyces_cerevisiae/Saccharomyces_cerevisiae.R64-1-1.84.gtf.gz"),
        rules.generate_yeast_remove_list.output
    output:
        expand("{path}/Saccharomyces_cerevisiae.R64-1-1.{suffix}", path = ref_yeast, suffix = ["dna.toplevel.fa", "84.gtf"]),
        expand("{ref_name}.{suffix}", ref_name = yeast_filt, suffix = ["fa", "t2g", "dup", "unextracted"])
    shell:
        "wget -O {ref_yeast}/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz ftp://ftp.ensembl.org/pub/release-84/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz && "
        "wget -O {ref_yeast}/Saccharomyces_cerevisiae.R64-1-1.84.gtf.gz ftp://ftp.ensembl.org/pub/release-84/gtf/saccharomyces_cerevisiae/Saccharomyces_cerevisiae.R64-1-1.84.gtf.gz && "
        # "gunzip -c {input[0]} > {output[0]} && "
        # "gunzip -c {input[1]} > {output[1]} && "
        "gunzip -c {ref_yeast}/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz > {output[0]} && "
        "gunzip -c {ref_yeast}/Saccharomyces_cerevisiae.R64-1-1.84.gtf.gz > {output[1]} && "
        "{script_path}/genome_to_transcript_set {output[0]} {output[1]} {input[2]} None {yeast_filt}"

rule generate_yeast_rRNAs_fa:
    input:
        expand("{path}/yeast_{rRNA}.fa", path = gt_path, rRNA = ["18S", "25S"])
    output:
        expand("{path}/yeast_rRNAs.fa", path = ref_yeast)
    shell:
        "cat {input} > {output}"

rule build_PROBer_and_Bowtie2_indices_for_yeast_rRNAs_fa:
    input: 
        "{path}/yeast_rRNAs.fa".format(path = ref_yeast), 
        PROBer, Bowtie2
    output: 
        touch(yeast_rRNAs)
    shell:
        "{PROBer} prepare --bowtie2 --bowtie2-path {bowtie2_path} {input[0]} {output}"


rule download_mouse_genome:
    # input:
    #     FTP.remote("ftp.ensembl.org/pub/release-74/fasta/mus_musculus/dna/Mus_musculus.GRCm38.74.dna.primary_assembly.fa.gz")
    output:
        "{path}/Mus_musculus.GRCm38.74.dna.primary_assembly.fa".format(path = ref_mouse)
    shell:
        # "gunzip -c {input} > {output}"
        "wget -O {ref_mouse}/Mus_musculus.GRCm38.74.dna.primary_assembly.fa.gz ftp://ftp.ensembl.org/pub/release-74/fasta/mus_musculus/dna/Mus_musculus.GRCm38.74.dna.primary_assembly.fa.gz && "
        "gunzip -c {ref_mouse}/Mus_musculus.GRCm38.74.dna.primary_assembly.fa.gz > {output}"

rule download_mouse_GTF:
    # input:
    #     FTP.remote("ftp.ensembl.org/pub/release-74/gtf/mus_musculus/Mus_musculus.GRCm38.74.gtf.gz")
    output:
        "{path}/Mus_musculus.GRCm38.74.gtf".format(path = ref_mouse)
    shell:
        # "gunzip -c {input} > {output}"
        "wget -O {ref_mouse}/Mus_musculus.GRCm38.74.gtf.gz ftp://ftp.ensembl.org/pub/release-74/gtf/mus_musculus/Mus_musculus.GRCm38.74.gtf.gz && "
        "gunzip -c {ref_mouse}/Mus_musculus.GRCm38.74.gtf.gz > {output}"

rule generate_mouse_remove_list:
    input:
        rules.download_mouse_GTF.output
    output:
        "{path}/remove_list.txt".format(path = ref_mouse)
    shell:
        "{script_path}/gen_mouse_remove_list {input} {output}"

rule extract_mouse_transcripts:
    input:
        rules.download_mouse_genome.output,
        rules.download_mouse_GTF.output,
        rules.generate_mouse_remove_list.output,
        "{path}/mouse_rRNAs.fa".format(path = gt_path)
    output:
        expand("{ref_name}.{suffix}", ref_name = mouse_filt, suffix = ["fa", "t2g", "dup", "unextracted"])
    shell:
        "{script_path}/genome_to_transcript_set {input} {mouse_filt}"

rule download_human_genome:
    # input:
    #     FTP.remote("ftp.ensembl.org/pub/release-83/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz")
    output:
        "{path}/Homo_sapiens.GRCh38.dna.primary_assembly.fa".format(path = ref_human)
    shell:
        # "gunzip -c {input} > {output}"
        "wget -O {ref_human}/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz ftp://ftp.ensembl.org/pub/release-83/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz && "
        "gunzip -c {ref_human}/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz > {output}"

rule build_Bowtie_indices_for_iCLIP_analyses:
    input:
        rules.download_human_genome.output,
        PROBer, Bowtie
    output:
        touch(human_ref)
    shell:
        "{PROBer} prepare --genome --bowtie --bowtie-path {bowtie_path} {input[0]} {human_ref}"
