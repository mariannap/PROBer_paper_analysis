#!/usr/bin/env Rscript

argv = commandArgs(TRUE)
if (length(argv) != 4) {
	cat("Usage: train_RNAprob_binned ct_dir shape_dir train_txt out_txt\n")
	q(status = 1)
}

# INPUTS ------------------------------------------------------------------
flag = list() # Initialize flag
flag$ct <- argv[1] # Path to .ct files
flag$shape <- argv[2] # path to .shape files
flag$train <- argv[3] # List of RNAs used for training
flag$out <- argv[4]
bin_size <- 0.1 # Size of the bin for the empirical probability distributions

# DEFINE MAIN -------------------------------------------------------------
train_RNAprob_binned <- function(flag,bin_size=0.1) {
	
	# INNER FUNCTIONS -------------------------------------------------------
	match_range <- function(x,bin_size) {
	x <- x[!is.na(x)]
	dx <- x/bin_size
	rm <- x-(floor(abs(dx))*sign(dx))*bin_size
	if (rm<0) {
		out <- x+abs(rm)
	} else {
		out <- x+(bin_size-rm)
	}
	return(out)
	}
	
	# Disentangle stacked and helix-end paired bases
	get_pair_3s <- function(rp) {
	n <- length(rp)
	new_pair <- rep(NA,n)
	for (i in 1:n) {
		if (rp[i] == 0) {
		new_pair[i] <- 0
		} else if (i==1 | i==n) {
		new_pair[i] <- 1
		} else if (rp[i-1]!=0 & rp[i+1]!=0 & rp[i-1]==rp[i]+1 & rp[i+1]==rp[i]-1) {
		new_pair[i] <- 2
		} else {
		new_pair[i] <- 1
		}
	}
	return(new_pair)
	}
	
	# MAIN INNER --------------------------------------------------------------
	# Load training file

	data = read.table(flag$train, stringsAsFactors = F)

	pair_all <- NULL
	shape_all <- NULL
	
	# Get SHAPE and pairing for RNAs in the training set
	for (rnai in 1:dim(data)[1]) {
	# read .ct
	ct <- read.table(paste0(flag$ct,"/",data[rnai, 1],".ct"),skip=1)
	
	# Get pairing state from .ct
	pair <- ct$V5
	pair_all <- c(pair_all,get_pair_3s(pair))
	
	# Read .shape
	shape <- read.table(paste0(flag$shape,"/",data[rnai, 2],'.shape'))$V2
	shape_all <- c(shape_all,shape)
	}
	
	# Set SHAPE = -999 to NA
	shape_all[shape_all == -999] <- NA
	
	# Build range
	data_range <- range(shape_all,na.rm = T)
	data_range <- sapply(data_range,match_range,bin_size)
	data_range[1] <- data_range[1]-bin_size
	
	dta <- list()
	dta$un <- shape_all[pair_all==0 & !is.na(shape_all)]
	dta$ph <- shape_all[pair_all==1 & !is.na(shape_all)]
	dta$ps <- shape_all[pair_all==2 & !is.na(shape_all)]
	
	# Compute the density of the data
	dens <- list()
	dens$un <- density(dta$un,bw="SJ")
	dens$ph <- density(dta$ph,bw="SJ")
	dens$ps <- density(dta$ps,bw="SJ")
	
	dens_range <- list()
	dens_range$un <- density(dta$un,bw=dens$un$bw,from = data_range[1],to=data_range[2],n=diff(data_range)/bin_size+1)
	dens_range$ph <- density(dta$ph,bw=dens$ph$bw,from = data_range[1],to=data_range[2],n=diff(data_range)/bin_size+1)
	dens_range$ps <- density(dta$ps,bw=dens$ps$bw,from = data_range[1],to=data_range[2],n=diff(data_range)/bin_size+1)
	
	# WRITE PARAM FILE --------------------------------------------------------
	bin_n <- mean(diff(dens_range$un$x))
	
	# Write files
	ds <- as.data.frame(c(paste(min(dens_range$ph$x),bin_n),dens_range$ph$y))
	colnames(ds) <- ">SHAPE|helix_end|X"
	write.table(ds,file=flag$out,quote=F,sep="",row.names = F)
	
	ds <- as.data.frame(c(paste(min(dens_range$ps$x),bin_n),dens_range$ps$y))
	colnames(ds) <- ">SHAPE|stacked|X"
	write.table(ds,file=flag$out,quote=F,sep="",row.names = F, append = T)
	
	ds <- as.data.frame(c(paste(min(dens_range$un$x),bin_n),dens_range$un$y))
	colnames(ds) <- ">SHAPE|unpaired|X"
	write.table(ds,file=flag$out,quote=F,sep="",row.names = F, append = T)
}

# RUN MAIN ----------------------------------------------------------------
train_RNAprob_binned(flag)

